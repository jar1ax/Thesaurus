<?php

namespace app\models;

use app\models\Authors;
use arogachev\ManyToMany\behaviors\ManyToManyBehavior;// php composer.phar require --prefer-dist arogachev/yii2-many-to-many
use Yii;
use yii\web\UploadedFile;
use app\models\ImageUpload;

/**
 * This is the model class for table "book".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $image
 * @property string|null $description
 * @property int $author_id
 * @property string|null $date
 *
 * @property Authors[] $authors
 */
class Booklist extends \yii\db\ActiveRecord
{
    public $editableAuthors = [];
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'book';
    }

    public function behaviors()
    {
        return [
            [
                'class' => ManyToManyBehavior::className(),

                'relations' => [
                    [
                        'editableAttribute' => 'editableAuthors', // Editable attribute name
                        'table' => 'book_has_authors', // Name of the junction table
                        'ownAttribute' => 'book_id', // Name of the column in junction table that represents current model
                        'relatedModel' => Authors::className(), // Related model class
                        'relatedAttribute' => 'authors_id', // Name of the column in junction table that represents related model
                    ],
                ],
            ],
        ];
    }
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['description'], 'string'],
            [['date'], 'safe'],
            [['editableAuthors'],'safe'],
            [['name', 'image'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'image' => 'Image',
            'description' => 'Описание',
            'date' => 'Дата публикации',
        ];
    }
    /**
     * Gets query for [[Authors]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getAuthors()
    {
        return $this->hasMany(Authors::className(), ['id' => 'authors_id'])->viaTable('book_has_authors',
            ['book_id' => 'id'])->orderBy('last_name');
    }
    /**
     * {@SetImage}
     */
    public function actionSetImage($id)
    {

        $model= new ImageUpload;


        if (Yii::$app->request->isPost){
            $book=$this->findModel($id);

            $file=UploadedFile::getInstance($model,'image');

            $book->saveImage($model->upload($file,$book->image));

            $this->redirect(['view', 'id' => $book->id]);


        }

        return $this->renderAjax('image',['model'=>$model]);
    }



        /**
     * Gets query for [[fullName of Authors]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getFullName(){
        return $this->authors->FullName;

    }
    /**
     * Gets query for [[Image]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function saveImage($filename)
    {
        $this->image= $filename;
        $this->save(false);
    }

    public function deleteImage()
    {
        $ImageUploadModel = new ImageUpload();
        $ImageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub

    }
    public function getImage()
    {

        return ($this->image) ? 'uploads/'. $this->image : 'no-image.jpg';

    }
}
